{"version":3,"sources":["webpack:///./src/app/editor/client/view/section/sidebar/pages/TileEditor/body/TileDesignEditor/editor/IconDesignEditor.vue?a712","webpack:///./src/app/editor/client/view/section/sidebar/pages/TileEditor/body/TileDesignEditor/editor/IconDesignEditor.vue","webpack:///./src/app/editor/client/view/section/sidebar/pages/TileEditor/body/TileDesignEditor/editor/IconDesignEditor.vue?b809","webpack:///./src/app/editor/client/view/section/sidebar/pages/TileEditor/body/TileDesignEditor/editor/IconDesignEditor.vue?bd31","webpack:///./src/app/editor/client/logic/defaults.ts"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","_v","_s","i18n","attrs","defaultColor","alphaColorEnabled","autoColorEnabled","colorList","model","value","callback","$$v","color","expression","hideVisibleToggle","_e","visibility","staticRenderFns","useColorChangeHandler","settings","emit","onColorChange","newSettings","useVisibleChangeHandler","onVisibleChange","visible","IconDesignEditor","components","CheckboxToggleEditorControl","ColorBoxEditorControl","props","required","default","undefined","type","Object","defaults","siteSettings","Array","Boolean","setup","root","$store","get","set","component","calculateActualFontDefault","fontDefault","siteDesignSettings","startsWith","calculateActualTextSizeDefault","textSizeDefault","toString","calculateActualColorDefault","colorDefault"],"mappings":"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","file":"js/icon-design-editor.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:\"ine-block ine-mb20\"},[_c('div',{staticClass:\"ine-title ine-title--h3\"},[_vm._v(\" \"+_vm._s(_vm.i18n('CommonLabels.Text.Color'))+\" \")]),_c('ColorBoxEditorControl',{attrs:{\"default-value\":_vm.defaultColor,\"alpha-enabled\":_vm.alphaColorEnabled,\"auto-enabled\":_vm.autoColorEnabled,\"preset\":_vm.colorList},model:{value:(_vm.color),callback:function ($$v) {_vm.color=$$v},expression:\"color\"}})],1),(!_vm.hideVisibleToggle)?_c('div',{staticClass:\"ine-block ine-mb20\"},[_c('div',{staticClass:\"ine-line\"},[_c('CheckboxToggleEditorControl',{attrs:{\"label\":_vm.i18n('CommonLabels.ShowElement.toggle')},model:{value:(_vm.visibility),callback:function ($$v) {_vm.visibility=$$v},expression:\"visibility\"}})],1)]):_vm._e()])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport {\n  computed, defineComponent, PropType, Ref,\n} from '@vue/composition-api';\nimport {\n  CheckboxToggleEditorControl,\n  ColorBoxEditorControl,\n} from '@/app/editor/client/view/component/control';\nimport { TextSettings } from '@/app/shared/client/type/settings/text-settings';\nimport { Color } from '@/app/shared/client/type/color';\nimport { calculateActualColorDefault } from '@/app/editor/client/logic/defaults';\nimport { GlobalDesign } from '@/app/shared/client/type/tile/global';\nimport useI18N from '@/app/shared/client/logic/i18n';\nimport { IconDefaults, IconSettings } from '@/app/shared/client/type/settings/icon-settings';\n\nfunction useColorChangeHandler(\n  settings: Readonly<Ref<Readonly<TextSettings>>>,\n  emit: (event: string, arg: TextSettings) => void,\n): (value?: Color) => void {\n  function onColorChange(value?: Color): void {\n    const newSettings = {\n      ...settings.value,\n      color: value,\n    };\n    emit('editor-action', newSettings);\n  }\n\n  return onColorChange;\n}\n\nfunction useVisibleChangeHandler(\n  settings: Readonly<Ref<Readonly<TextSettings>>>,\n  emit: (event: string, arg: TextSettings) => void,\n): (value?: boolean) => void {\n  function onVisibleChange(value?: boolean): void {\n    const newSettings = {\n      ...settings.value,\n      visible: value,\n    };\n    emit('editor-action', newSettings);\n  }\n\n  return onVisibleChange;\n}\n\nconst IconDesignEditor = defineComponent({\n  components: {\n    CheckboxToggleEditorControl,\n    ColorBoxEditorControl,\n  },\n  props: {\n    value: {\n      required: false,\n      default: undefined,\n      type: Object as PropType<IconSettings>,\n    },\n    defaults: {\n      required: true,\n      type: Object as PropType<IconDefaults>,\n    },\n    siteSettings: {\n      required: false,\n      default: undefined,\n      type: Object as PropType<GlobalDesign>,\n    },\n    colorList: {\n      required: true,\n      type: Array as PropType<string[]>,\n    },\n    autoColorEnabled: {\n      required: true,\n      type: Boolean,\n    },\n    alphaColorEnabled: {\n      required: true,\n      type: Boolean,\n    },\n    hideVisibleToggle: {\n      required: false,\n      default: false,\n      type: Boolean,\n    },\n  },\n  setup(props, { root, emit }) {\n    const i18n = useI18N(root.$store);\n\n    const settings = computed(() => ({\n      color: props.value?.color,\n      visible: props.value?.visible ?? props.defaults.visible,\n    }));\n\n    const defaultColor = computed(() => calculateActualColorDefault(\n      props.defaults.color,\n      props.siteSettings,\n    ));\n    const color = computed({\n      get: () => settings.value.color,\n      set: useColorChangeHandler(settings, emit),\n    });\n\n    const visibility = computed({\n      get: () => settings.value.visible,\n      set: useVisibleChangeHandler(settings, emit),\n    });\n\n    return {\n      i18n,\n      defaultColor,\n      color,\n      visibility,\n    };\n  },\n});\n\nexport default IconDesignEditor;\n","import mod from \"-!../../../../../../../../../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../../../../../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../../../../../../../../node_modules/ts-loader/index.js??ref--13-2!../../../../../../../../../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../../../../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IconDesignEditor.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../../../../../../../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../../../../../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../../../../../../../../node_modules/ts-loader/index.js??ref--13-2!../../../../../../../../../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../../../../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IconDesignEditor.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./IconDesignEditor.vue?vue&type=template&id=377f8955&\"\nimport script from \"./IconDesignEditor.vue?vue&type=script&lang=ts&\"\nexport * from \"./IconDesignEditor.vue?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import {\n  GlobalDesign,\n} from '@/app/shared/client/type/tile/global';\nimport { Color } from '@/app/shared/client/type/color';\nimport {\n  extractGlobalColor,\n  extractGlobalFont,\n  extractGlobalTextSize,\n} from '@/app/editor/client/logic/site-settings';\nimport { Font } from '@/app/shared/client/type/font';\nimport {\n  GlobalColorsString,\n  GlobalFontsString,\n  GlobalTextSizeString,\n} from '@/app/shared/client/type/global-string';\n\nexport function calculateActualFontDefault(\n  fontDefault: Font | GlobalFontsString | undefined,\n  siteDesignSettings: GlobalDesign,\n): Font | undefined {\n  if (fontDefault?.startsWith('global.')) {\n    return extractGlobalFont(\n      fontDefault as GlobalFontsString,\n      siteDesignSettings,\n    );\n  }\n\n  return fontDefault as Font | undefined;\n}\n\nexport function calculateActualTextSizeDefault(\n  textSizeDefault: number | GlobalTextSizeString | undefined,\n  siteDesignSettings: GlobalDesign,\n): number | undefined {\n  if (textSizeDefault?.toString()?.startsWith('global.')) {\n    return extractGlobalTextSize(\n      textSizeDefault as GlobalTextSizeString,\n      siteDesignSettings,\n    );\n  }\n\n  return textSizeDefault as number | undefined;\n}\n\nexport function calculateActualColorDefault(\n  colorDefault: Color | GlobalColorsString | undefined,\n  siteDesignSettings?: GlobalDesign,\n): Color | undefined {\n  if (colorDefault?.toString()?.startsWith('global.')) {\n    return extractGlobalColor(\n      colorDefault as GlobalColorsString,\n      siteDesignSettings,\n    );\n  }\n\n  return colorDefault as Color;\n}\n\nexport default {};\n"],"sourceRoot":""}